<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[新手快速使用Github进行项目开发]]></title>
    <url>%2F2019%2F03%2F16%2F%E6%96%B0%E6%89%8B%E5%BF%AB%E9%80%9F%E4%BD%BF%E7%94%A8Github%E8%BF%9B%E8%A1%8C%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%2F</url>
    <content type="text"><![CDATA[前言刚进入公司的时候，大家都在用SVN进行协作开发，我什么也不会，所以跟随公司主流，学习了Windows下TortoiseSVN（小乌龟）的使用。当然，项目上只用到了几个右键菜单操作，刚更新，提交，还有clean up。当时感觉SVN很神奇，问了一下朋友他们公司是不是也用这个协作开发。意料之外，朋友跟我讲了git，说现在SVN大都是一些老的公司才会用，我不禁一身冷汗，刚入门就要被淘汰的节奏啊。于是在朋友的帮助下开始摸索git。中间曲折以后再进行赘述，先开始正题。 首先要了解一些git的基本概念和命令，例如分支，合并，标签，git add .，git commit -m &quot;xxx&quot;，git push等等。基本概念和命令了解之后，我们就可以利用git进行项目开发了，GitHub和GitLab开发流程类似，在此以GitHub作为例子进行项目开发演示。 第一步，创建项目首先点击右上角的加号，在弹出菜单点击 New repository ，在打开的页面输入项目名称，然后点击 Create repository 即可。如下图： 第二步，clone项目然后在本地使用git clone命令把项目clone到本地。如下图：命令：1git clone https://github.com/yupoxiong/test-project.git 第三步，创建并切换到 develop 分支默认我们是在mater主分支上，原则上该分支代码和线上代码保持一致，我们需要在develop分支进行开发工作，当develop分支开发完成后再进行合并。现在，我们创建一个develop分支。如下图：命令：1git checkout -b develop 上面的命令可拆为git branch develop和git checkout develop两条命令。 第四步，提交develop分支上的更改此步骤常规commit并push到GitHub，然后我们在GitHub的develop分支就可以看到比master分支多出一个one.html文件。命令：123git add .git commit -m &quot;develop分支第一次提交&quot;git push origin develop 第五步，合并分支先切换到主分支，然后执行合并命令，然后push到GitHub。如下图：命令：123git checkout mastergit merge --no-ff develop -m &quot;合并develop分支&quot;git push 关于--no-ff参数，表示快进式合并，直接将master分支指向develop分支。 第六步，把你的开发伙伴加进来在项目主页点击 Settings 按钮，然后点击左侧的Collaborators，然后搜索你要添加的人，点击右侧的 Add collaborator等待对方确认就可以了。 其他注意事项commit规范参考：Angular.js提交规则 commit相关工具：commitizen]]></content>
      <tags>
        <tag>Github</tag>
        <tag>git</tag>
        <tag>项目开发</tag>
        <tag>开发流程</tag>
        <tag>版本控制</tag>
        <tag>git分支</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[那些令人尴尬的BUG]]></title>
    <url>%2F2019%2F03%2F08%2F%E9%82%A3%E4%BA%9B%E4%BB%A4%E4%BA%BA%E5%B0%B4%E5%B0%AC%E7%9A%84BUG%2F</url>
    <content type="text"><![CDATA[在刚开始做PHP项目开发的时候，总会碰到一些神奇的BUG，这些BUG经过多次调试修改依旧存在，以至于我们这种菜鸟刚入门就很绝望。但这“BUG”最终被找到之后却让人哭笑不得，在这里就分享一下一些遇到的有意思的BUG。 程序内打印$username没问题，前台页面却死活不显示。 一般这种情况发生在大概以下的情况：1234567$username = &apos;Anglela&apos;;var_dump($username); //没有发现问问题·········$this-&gt;assign(&apos;username&apos;, $useranme);//然而页面上显示的就是不对 其实在中间某行原本的$username已经被换成了$useranme，有些编辑器对于类似于useranme,proflie这种单词手误拼写并没有提示，加上PHP配置上忽略了Notice，对于某些新手来讲，可能要找十几分钟甚至更久才找出问题所在。不过，这种问题对于英语还可以，用了智能IDE和php.ini配置合理的同学，基本上不会遇到，偶尔遇到基本也会轻松解决。 文件上传到服务器之后不生效。 当修改了某个文件后，在本地测试没有任何问题，传到服务器上却死活不生效。清除缓存、各种var_dump, dump, dd()最终还是没有找到问题所在，然后恍然大悟，MD，传错文件了/文件夹对应错了/传到了测试服务器！其实，这个问题大概率会发生在一个人同时做多个项目（打开多个FTP），修改完代码就往服务器传的情况下。这种情况就体现出代码部署规范的好处了，但往往中小型外包公司并没有严格的代码部署规范。 if判断的时候得到了意外的结果。 大致会是以下操作：12345if ($var = 2) &#123; echo &apos;走了if&apos;; &#125; else &#123; echo &apos;走了else&apos;;&#125; 以上代码加了空格，可能一眼就能看出来if里面是=而不是==，这种情况一般比较少见，但也偶尔会碰到新手遇到这个问题，蛮有意思的。 以上问题基本都是因为自己的马虎或者规范问题导致的一些令人尴尬的“BUG”。不过对于PHP开发新手来讲，初期也可能因为对PHP语言了解的太少会触发很多意外的BUG。例如： 比较两个浮点数之后发现总是得不到自己想要的结果。这个踩过一次坑或者在学习的时候认真看资料了基本上是不会遇到的。但实际上还是有很多新手不知道该用bcmath之类来进行比较。 用try catch执行事务的时候发现走了try之后依旧会走catch，这个在ThinkPHP5.* 版本框架中见过几个人问过同样的问题，是因为大多在try中最后使用了TP自带的return $this-&gt;success(&#39;xxx&#39;);代码，然而这个success是继承的Exception，当然会被catch了。 类似的BUG在很多新手或者初级开发者身上时有发生，避免出现这些令人尴尬的BUG，最好的解决办法就是掌握好PHP的基础知识，从一开始做好代码规范（例如PSR-2）和开发规范，配合现在的强大IDE（例如PhpStorm之类的），基本可以避免以上绝大多数问题。]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>BUG</tag>
        <tag>程序员</tag>
        <tag>错误</tag>
      </tags>
  </entry>
</search>
