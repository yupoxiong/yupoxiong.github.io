<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[阿里云Composer全量镜像已出]]></title>
    <url>%2F2019%2F07%2F03%2F%E9%98%BF%E9%87%8C%E4%BA%91Composer%E5%85%A8%E9%87%8F%E9%95%9C%E5%83%8F%E5%B7%B2%E5%87%BA%2F</url>
    <content type="text"><![CDATA[团队Composer镜像之前一直在用https://www.phpcomposer.com/，后来某一天因为未知的原因无法再使用。团队里并不是每个人都能翻墙，开发起来很头疼，后来出现了https://php.cnpkg.org/和https://packagist.laravel-china.org/，各有优势。但因为之前的phpcomposer出现问题的经历，一直希望能有大厂站出来出一个快速，稳定的镜像。只能说，阿里云，真香。相关资料：阿里云 Composer 全量镜像]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>composer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ThinkPHP6.0composer应用开发试水]]></title>
    <url>%2F2019%2F05%2F21%2FThinkPHP6-0composer%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E8%AF%95%E6%B0%B4%2F</url>
    <content type="text"><![CDATA[TP6.0原生支持多应用，怎么理解呢，就是以前的application/admin模块、application/api模块之类的现在都都叫一个应用，admin应用、api应用，并且目录调整为app/admin、app/api，简洁了不少。TP6.0版本的应用比TP5.*版本的模块多了一些东西，看一下官方的说明： 6.0版本提供了对多应用的良好支持，每个应用是一个app目录的子目录，每个应用具有独立的路由、配置，以及控制器和模型等文件，这些应用可以公用框架核心以及扩展。而且可以支持composer应用加载。今天，我们来试水一下composer应用。之前写过一个针对TP5.*的省市区composer扩展，今天我们就把它升级成TP6.0的composer应用。 下面先简单介绍一下composer扩展包的开发，而TP6.0的应用只是composer包和正常模块（应用）的结合而已。]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>composer</tag>
        <tag>thinkphp</tag>
        <tag>tp6.0</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RESTful API常用HTTP状态码整理]]></title>
    <url>%2F2019%2F05%2F11%2FRESTful-API%E5%B8%B8%E7%94%A8HTTP%E7%8A%B6%E6%80%81%E7%A0%81%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[200200表示请求成功。这也是用的几率最大的状态码了。 400400表示客户端的错误。不想详细说明的客户端错误都可以用400表示。 401401表示未授权。比如客户端token错误或失效时可以返回。 403403表示禁止访问。和401相似，此状态码主要用在用户没有此接口的操作权限时返回，例如普通用户没有权限删除文章。 404404表示访问的资源不存在。例如访问的接口不存在就可以返回404，其他可使用的场景，例如查询ID为1的用户信息，当用户不存在时也可返回404 500500表示内部服务器错误。当程序内部出现错误的时候可以返回500。]]></content>
      <categories>
        <category>API</category>
      </categories>
      <tags>
        <tag>restful</tag>
        <tag>api</tag>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[宝宝记录小程序功能模块设计]]></title>
    <url>%2F2019%2F04%2F27%2F%E5%AE%9D%E5%AE%9D%E8%AE%B0%E5%BD%95%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8A%9F%E8%83%BD%E6%A8%A1%E5%9D%97%E8%AE%BE%E8%AE%A1%2F</url>
    <content type="text"><![CDATA[小程序端主要功能功能概述暂定功能有添加宝宝功能，添加宝宝记录，添加宝宝重要事件，记录宝宝身高体重，分享宝宝给亲朋好友，可以查看亲朋好友分享过来的宝宝。 页面概述目前主要页面暂定两个，一个为首页，一个为我的，首页展示当前宝宝的信息和记录，我的页面展示个人信息和一些操作菜单。 程序框架前端使用小程序wxml、wxss和js开发，后端使用PHP开发，暂定ThinkPHP5.1框架。]]></content>
  </entry>
  <entry>
    <title><![CDATA[我要给平盖开发一个小程序]]></title>
    <url>%2F2019%2F04%2F26%2F%E6%88%91%E8%A6%81%E7%BB%99%E5%B9%B3%E7%9B%96%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E5%B0%8F%E7%A8%8B%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[从去年平盖出生后，我就打算给他做个微信小程序，记录他的成长。我认为，目前微信小程序是最好的记录载体，无论自己看，还是分享给家人，都非常方便，无需打开浏览器看网页，更不需要下载单独的App。可惜有了想法之后，实际行动却很缓慢，一拖再拖，转眼已然大半年过去了。还有不到两个月就是平盖的周岁生日了，我要赶在他周岁前做完，也算给他周岁的一个礼物，无论美丑，是否好用，这都是我所为他做的，也实现了我心里的承诺和目标。半途而废，虎头蛇尾，我不想他将来这样，虽不知道以后会如何教育，但现在唯有以身作则，树立榜样才是我最好的选择。 接下来，我会在博客中记录开发小程序的过程，一来有记录的过程可以让我更好的坚持下去，二来以后可以回过头来再看，必定感触极深。当然，本博客是记录技术的，还是技术记录为主，如果以后能帮助到那么一两个曾经和我同样迷茫的小白，那就再好不过了。]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>小程序</tag>
        <tag>微信小程序</tag>
        <tag>宝宝记录</tag>
        <tag>BabyRecord</tag>
        <tag>平盖</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP导出Excel报错-Formula Error: An unexpected error occured]]></title>
    <url>%2F2019%2F04%2F25%2FPHP%E5%AF%BC%E5%87%BAExcel%E6%8A%A5%E9%94%99-Formula-Error-An-unexpected-error-occured%2F</url>
    <content type="text"><![CDATA[最近突然遇到一个问题，PHPExcel导出的数据报错，如下图： 顺着报错的行数开始找，发现有个微信昵称是=开头的，excel如果单元格第一个字符为等号的话就会当成计算来处理，后面不是合法的表达式，所以报错。解决方法很简单，在昵称前面加个单引号即可解决。如下：1$record['nickname'] = "'" . $d-&gt;nickname; 问题是小问题，不过这种细节值得开发的时候注意。踩坑之后，遇到了类似的场景，提前处理规避才是上策啊。]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>PHPExcel</tag>
        <tag>excel</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于微信授权登录提示错误代码40163的问题]]></title>
    <url>%2F2019%2F04%2F23%2F%E5%85%B3%E4%BA%8E%E5%BE%AE%E4%BF%A1%E6%8E%88%E6%9D%83%E7%99%BB%E5%BD%95%E6%8F%90%E7%A4%BA%E9%94%99%E8%AF%AF%E4%BB%A3%E7%A0%8140163%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[错误如下：1Authorize Failed: &#123;"errcode":40163,"errmsg":"code been used, hints: [ req_id: KJmBZRLnRa-kATyOa ]"&#125; 关于这个错误，一般会有两重情况，第一种就是网上大部分人所提到的，程序自身重复使用code，还有一种情况就是，程序有错误，导致重复请求，这种情况一在做开发的时候被忽略。]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>微信开发</tag>
        <tag>公众号开发</tag>
        <tag>微信授权登录</tag>
        <tag>PHP开发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记一次jquery validation 验证 select2的问题]]></title>
    <url>%2F2019%2F04%2F13%2F%E8%AE%B0%E4%B8%80%E6%AC%A1jquery-validation-%E9%AA%8C%E8%AF%81-select2%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[最近遇到一个问题，在表单页使用了jQuery Validation验证插件，但是页面内同时使用了select2插件，同时加了multiple属性，但是验证的时候死活不验证，于是上网搜索了相关资料，stackoverflow，csdn上都有类似的问题，但是给出的代码在我这里都不管用，于是这个折腾啊，中间差点考虑放弃前端验证，终于在捣鼓了2个小时之后终于解决了。 相关代码如下： html代码12345678910111213&lt;div class="form-group"&gt; &lt;label class="col-sm-2 control-label" for="role"&gt;角色&lt;/label&gt; &lt;div class="col-sm-10 col-md-4"&gt; &lt;select id="role" name="role[]" multiple="multiple" class="form-control" data-placeholder="请选择角色"&gt; &lt;option&gt;&lt;/option&gt; &lt;option value="1"&gt;管理员&lt;/option&gt; &lt;option value="2"&gt;财务&lt;/option&gt; &lt;option value="3"&gt;客服&lt;/option&gt; &lt;option value="4"&gt;运营&lt;/option&gt; &lt;option value="5"&gt;售后&lt;/option&gt; &lt;/select&gt; &lt;/div&gt;&lt;/div&gt; js代码12345678910111213141516171819202122232425&lt;script&gt; //select2 $('#role').select2(); //下面代码可以不加，加了用户体验会好一些 $(function () &#123; $("#role").change(function()&#123; $(this).valid(); &#125;); &#125;); //jqueryValidation表单验证 $('#dataForm').validate(&#123; ignore: '', rules: &#123; 'role[]': &#123; required: true &#125; &#125;, messages: &#123; 'role[]': &#123; required: '请选择角色' &#125; &#125;, &#125;);&lt;/script&gt; 最终效果图如下：]]></content>
      <tags>
        <tag>jquery,select2,前端,javascript,jquery-validation,表单验证</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ThinkPHP5报 Namespace declaration statement has to be the very first statement or after any declare call in the script 错误的解决方法]]></title>
    <url>%2F2019%2F03%2F30%2FThinkPHP5%E6%8A%A5-Namespace-declaration-statement-has-to-be-the-very-first-statement-or-after-any-declare-call-in-the-script-%E9%94%99%E8%AF%AF%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[错误介绍一般这个错误用PhpStorm开发的人很少出现，如果在namespace之前输出内容的话，IDE会直接提示错误，一眼就能看出来。但是，偶尔拿到别人的代码，可能文件有BOM头，同时也检查不到之前输出了什么，就让小白有点头疼了。 错误的可能性以下为两种可能： 第一种,在namespace之前手动输出了内容. 第二种,文件存在BOM头。 解决方法 对于自己手动输出内容的删除相关代码就可以了。 对于有BOM头的可参考上图，在PhpStorm内点击右键，会有一个Remove BOM的选项，点一下就去掉了。 同时提供一个去除BOM头的php文件，可以直接复制使用。代码如下：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061&lt;?php/** * 去除BOM头代码 *///需要遍历的目录if (isset($_GET['dir'])) &#123; $basedir = $_GET['dir'];&#125; else &#123; $basedir = '.';&#125;//是否自动去除BOM头$auto = 1;check_dir($basedir);//遍历function check_dir($basedir)&#123; if ($dh = opendir($basedir)) &#123; while (($file = readdir($dh)) !== false) &#123; if ($file != '.' &amp;&amp; $file != '..') &#123; if (!is_dir($basedir . "/" . $file)) &#123; echo "filename: $basedir/$file " . check_bom("$basedir/$file") . " &lt;br/&gt;"; &#125; else &#123; $dir_name = $basedir . "/" . $file; check_dir($dir_name); &#125; &#125; &#125; closedir($dh); &#125;&#125;//检查BOM头function check_bom($filename)&#123; global $auto; $contents = file_get_contents($filename); $charset[1] = substr($contents, 0, 1); $charset[2] = substr($contents, 1, 1); $charset[3] = substr($contents, 2, 1); if (ord($charset[1]) == 239 &amp;&amp; ord($charset[2]) == 187 &amp;&amp; ord($charset[3]) == 191) &#123; if ($auto == 1) &#123; $rest = substr($contents, 3); rewrite($filename, $rest); return ('&lt;span style="color: red"&gt;找到BOM头并且已去掉。&lt;/span&gt;'); &#125; return ('&lt;span style="color: red"&gt;找到BOM头。&lt;/span&gt;'); &#125; return ("没有找到BOM头");&#125;//重新写入无BOM头的文件function rewrite($filename, $data)&#123; $file = fopen($filename, "w"); flock($file, LOCK_EX); fwrite($file, $data); fclose($file);&#125;]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>ThinkPHP</tag>
        <tag>命名空间</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MacOS快速搭建Nginx+PHP+MySql+Redis开发环境教程]]></title>
    <url>%2F2019%2F03%2F27%2FMacOS%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BANginx-PHP-MySql-Redis%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[第一步，安装HomebrewMac系统下有一个安装软件的神器，Homebrew。安装brew只需一个命令即可安装，如下：1/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot; Mac小白可能会问，请问在哪里运行这个命令？ 答：同时按下 command+space(空格) 打开聚焦搜索（英文名字Spotlight），然后在搜索框输入终端，就可以找到啦。如下图： brew有以下常用命令： 搜索软件1brew search nginx 安装软件1brew install nginx 卸载软件1brew uninstall nginx 查看已安装的软件列表1brew list 查看软件信息1brew info nginx 相关资料：brew官网 第二步，安装Nginx1brew install nginx 安装完成后启动nginx1sudo brew services start nginx 这一步会让输入密码，输入密码回车后即可访问http://localhost:8080查看效果 停止nginx命令1sudo brew services stop nginx 重启nginx命令1sudo brew services stop nginx 第三步，安装PHP7.2安装命令1brew install php@7.2 第三步，安装MySql5.71brew install mysql@5.7 第四步，安装Redis1brew install redis 第五步，安装PHP Redis扩展1pecl install redis]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Nginx</tag>
        <tag>MySql</tag>
        <tag>Redis</tag>
        <tag>开发环境</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS系统配置Nginx+PHP负载均衡]]></title>
    <url>%2F2019%2F03%2F23%2FCentOS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AENginx-PHP%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%2F</url>
    <content type="text"><![CDATA[本教程采用1台转发服务器和2台应用服务器（硬件配置相同）作为示例，系统均为CentOS7.4，网址为https://blog.yufuping.com，转发服务器为443端口，内网转发到应用服务器的80端口。本教程采用权重策略，其他策略可参考网络资料。 第一步，安装转发Nginx安装gcc1yum install gcc gcc-c++ 安装pcre1yum install -y pcre pcre-devel 安装zlib1yum install -y zlib zlib-devel 安装openssl1yum install -y openssl openssl-devel 下载1wget https://nginx.org/download/nginx-1.15.3.tar.gz 解压1tar -zxvf nginx-1.15.3.tar.gz 进入目录1cd nginx-1.15.3 编译nginx1./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_gzip_static_module --with-http_ssl_module --with-stream 这里的--with-stream stream模块是为了配置负载均衡转发，应用服务器安装nginx可以不加。 安装nginx1make &amp;&amp; make install 第二步，配置转发Nginx在nginx.conf中http内配置upstream，此处以blog.yupoxiong.com域名为示例。1234upstream blog.yupoxiong.com &#123; server 172.20.20.2:80 weight=1; #第一个服务器 server 172.20.20.3:80 weight=1; #第二个服务器 &#125; weight为权重，如果机器配置不均衡，可以调整weight参数。例如第2台机器的配置为第1台机器的2倍，那就可以把第2台的weight改成2。 server内配置12345678910111213141516server &#123; listen 443 ssl; server_name blog.yupoxiong.com; ssl_certificate cert/blog.yupoxiong.crt; ssl_certificate_key cert/blog.yupoxiong.key; ssl_session_cache shared:SSL:1m; ssl_session_timeout 5m; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; location / &#123; proxy_pass http://blog.yupoxiong.com; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; &#125; 第三步，正常安装配置应用服务器Nginx和PHP即可应用服务器nginx可以和转发服务器使用相同的命令，然后正常配置nginx.conf即可，以下为PHP的安装教程。 安装php依赖1yum install -y gcc gcc-c++ make zlib zlib-devel pcre pcre-devel libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel libxml2 libxml2-devel glibc glibc-devel glib2 glib2-devel bzip2 bzip2-devel ncurses ncurses-devel curl curl-devel e2fsprogs e2fsprogs-devel krb5 krb5-devel openssl openssl-devel openldap openldap-devel nss_ldap openldap-clients openldap-servers 下载php7.21http://cn2.php.net/get/php-7.2.10.tar.gz/from/this/mirror 解压1tar -zxvf mirror 进入目录1cd mirror 编译php1./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php --with-openssl --enable-mbstring --enable-ftp --with-gd --with-jpeg-dir=/usr --with-png-dir=/usr --with-mysql=mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-pear --enable-sockets --with-freetype-dir=/usr --with-zlib --with-libxml-dir=/usr --with-xmlrpc --enable-zip --enable-fpm --enable-xml --enable-sockets --with-gd --with-zlib --with-iconv --enable-zip --with-freetype-dir=/usr/lib/ --enable-soap --enable-pcntl --enable-cli --with-curl --enable-bcmath 安装1make &amp;&amp; make install 配置文件1cp php.ini-production /usr/local/php/php.ini php.ini开启错误显示1display_errors = On 复制启动脚本：12cp ./sapi/fpm/init.d.php-fpm /etc/init.d/php-fpmchmod +x /etc/init.d/php-fpm 修改php-fpm配置文件：123cd /usr/local/php/etccp php-fpm.conf.default php-fpm.confvim php-fpm.conf 去掉 pid = run/php-fpm.pid 前面的分号123cd php-fpm.dcp www.conf.default www.confvim www.conf 修改user和group的用户为当前用户(也可以不改，默认会添加nobody这个用户和用户组) 【启动PHP】1234/etc/init.d/php-fpm start #php-fpm启动命令/etc/init.d/php-fpm stop #php-fpm停止命令/etc/init.d/php-fpm restart #php-fpm重启命令ps -ef | grep php 或者 ps -A | grep -i php #查看是否已经成功启动PHP]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Nginx</tag>
        <tag>CentOS</tag>
        <tag>负载均衡</tag>
        <tag>环境</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[新手快速使用Github进行项目开发]]></title>
    <url>%2F2019%2F03%2F16%2F%E6%96%B0%E6%89%8B%E5%BF%AB%E9%80%9F%E4%BD%BF%E7%94%A8Github%E8%BF%9B%E8%A1%8C%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%2F</url>
    <content type="text"><![CDATA[前言刚进入公司的时候，大家都在用SVN进行协作开发，我什么也不会，所以跟随公司主流，学习了Windows下TortoiseSVN（小乌龟）的使用。当然，项目上只用到了几个右键菜单操作，刚更新，提交，还有clean up。当时感觉SVN很神奇，问了一下朋友他们公司是不是也用这个协作开发。意料之外，朋友跟我讲了git，说现在SVN大都是一些老的公司才会用，我不禁一身冷汗，刚入门就要被淘汰的节奏啊。于是在朋友的帮助下开始摸索git。中间曲折以后再进行赘述，先开始正题。 首先要了解一些git的基本概念和命令，例如分支，合并，标签，git add .，git commit -m &quot;xxx&quot;，git push等等。基本概念和命令了解之后，我们就可以利用git进行项目开发了，GitHub和GitLab开发流程类似，在此以GitHub作为例子进行项目开发演示。 第一步，创建项目首先点击右上角的加号，在弹出菜单点击 New repository ，在打开的页面输入项目名称，然后点击 Create repository 即可。如下图： 第二步，clone项目然后在本地使用git clone命令把项目clone到本地。如下图：命令：1git clone https://github.com/yupoxiong/test-project.git 第三步，创建并切换到 develop 分支默认我们是在mater主分支上，原则上该分支代码和线上代码保持一致，我们需要在develop分支进行开发工作，当develop分支开发完成后再进行合并。现在，我们创建一个develop分支。如下图：命令：1git checkout -b develop 上面的命令可拆为git branch develop和git checkout develop两条命令。 第四步，提交develop分支上的更改此步骤常规commit并push到GitHub，然后我们在GitHub的develop分支就可以看到比master分支多出一个one.html文件。命令：123git add .git commit -m "develop分支第一次提交"git push origin develop 第五步，合并分支先切换到主分支，然后执行合并命令，然后push到GitHub。如下图：命令：123git checkout mastergit merge --no-ff develop -m "合并develop分支"git push 关于--no-ff参数，表示快进式合并，直接将master分支指向develop分支。 第六步，把你的开发伙伴加进来在项目主页点击 Settings 按钮，然后点击左侧的Collaborators，然后搜索你要添加的人，点击右侧的 Add collaborator等待对方确认就可以了。 其他注意事项commit规范参考：Angular.js提交规则 commit相关工具：commitizen]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>git</tag>
        <tag>项目开发</tag>
        <tag>开发流程</tag>
        <tag>版本控制</tag>
        <tag>git分支</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[那些令人尴尬的BUG]]></title>
    <url>%2F2019%2F03%2F08%2F%E9%82%A3%E4%BA%9B%E4%BB%A4%E4%BA%BA%E5%B0%B4%E5%B0%AC%E7%9A%84BUG%2F</url>
    <content type="text"><![CDATA[在刚开始做PHP项目开发的时候，总会碰到一些神奇的BUG，这些BUG经过多次调试修改依旧存在，以至于我们这种菜鸟刚入门就很绝望。但这“BUG”最终被找到之后却让人哭笑不得，在这里就分享一下一些遇到的有意思的BUG。 程序内打印$username没问题，前台页面却死活不显示。 一般这种情况发生在大概以下的情况：1234567$username = 'Anglela';var_dump($username); //没有发现问问题//···//···//···$this-&gt;assign('username', $useranme);//然而页面上显示的就是不对 其实在中间某行原本的$username已经被换成了$useranme，有些编辑器对于类似于useranme,proflie这种单词手误拼写并没有提示，加上PHP配置上忽略了Notice，对于某些新手来讲，可能要找十几分钟甚至更久才找出问题所在。不过，这种问题对于英语还可以，用了智能IDE和php.ini配置合理的同学，基本上不会遇到，偶尔遇到基本也会轻松解决。 文件上传到服务器之后不生效。 当修改了某个文件后，在本地测试没有任何问题，传到服务器上却死活不生效。清除缓存、各种var_dump, dump, dd()最终还是没有找到问题所在，然后恍然大悟，MD，传错文件了/文件夹对应错了/传到了测试服务器！其实，这个问题大概率会发生在一个人同时做多个项目（打开多个FTP），修改完代码就往服务器传的情况下。这种情况就体现出代码部署规范的好处了，但往往中小型外包公司并没有严格的代码部署规范。 if判断的时候得到了意外的结果。 大致会是以下操作：12345if ($var = 2) &#123; echo '走了if'; &#125; else &#123; echo '走了else';&#125; 以上代码加了空格，可能一眼就能看出来if里面是=而不是==，这种情况一般比较少见，但也偶尔会碰到新手遇到这个问题，蛮有意思的。 以上问题基本都是因为自己的马虎或者规范问题导致的一些令人尴尬的“BUG”。不过对于PHP开发新手来讲，初期也可能因为对PHP语言了解的太少会触发很多意外的BUG。例如： 比较两个浮点数之后发现总是得不到自己想要的结果。这个踩过一次坑或者在学习的时候认真看资料了基本上是不会遇到的。但实际上还是有很多新手不知道该用bcmath之类来进行比较。 用try catch执行事务的时候发现走了try之后依旧会走catch，这个在ThinkPHP5.* 版本框架中见过几个人问过同样的问题，是因为大多在try中最后使用了TP自带的return $this-&gt;success(&#39;xxx&#39;);代码，然而这个success是继承的Exception，当然会被catch了。 类似的BUG在很多新手或者初级开发者身上时有发生，避免出现这些令人尴尬的BUG，最好的解决办法就是掌握好PHP的基础知识，从一开始做好代码规范（例如PSR-2）和开发规范，配合现在的强大IDE（例如PhpStorm之类的），基本可以避免以上绝大多数问题。]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>BUG</tag>
        <tag>程序员</tag>
        <tag>错误</tag>
      </tags>
  </entry>
</search>
